@Entity(tableName = "bmi")
data class BmiEntity(
 @PrimaryKey(autoGenerate = true)
 var id: Long = 0L,
 var tanggal: Long = System.currentTimeMillis(),
 var berat: Float,
 var tinggi: Float,
 var isMale: Boolean
)
@Dao
interface BmiDao {
 @Insert
 fun insert(bmi: BmiEntity)
 @Query("SELECT * FROM bmi ORDER BY id DESC LIMIT 1")
 fun getLastBmi(): LiveData<BmiEntity?>
}
@Database(entities = [BmiEntity::class], version = 1, exportSchema = false)
abstract class BmiDb : RoomDatabase() {
 abstract val dao: BmiDao
 companion object {
 @Volatile
 private var INSTANCE: BmiDb? = null
 fun getInstance(context: Context): BmiDb {
 synchronized(this) {
 var instance = INSTANCE
 if (instance == null) {
 instance = Room.databaseBuilder(
  context.applicationContext,
 BmiDb::class.java,
 "bmi.db"
  )
  .fallbackToDestructiveMigration()
 .build()
  INSTANCE = instance
  }
  return instance
  }
  }
  }
 }
 }